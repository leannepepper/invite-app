{"version":3,"sources":["Header.js","FilterLists.js","AddPerson.js","GuestName.js","Guest.js","GuestList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","FilterLists","props","type","onChange","toggleFilter","checked","isFiltered","AddPerson","state","value","valueChange","e","_this","setState","target","handleSubmit","preventDefault","addPerson","onSubmit","this","placeholder","Component","GuestName","isEditing","children","handleNameEdits","Guest","src_GuestName","setName","name","isConfirmed","handleConfirmation","onClick","handleEditing","handleRemovePerson","index","GuestList","guests","filter","guest","map","id","src_Guest","key","toggleConfirmation","toggleEditing","text","setNameAt","App","getTotalInvited","invitees","length","prevInviteeId","toggleProperty","property","indexToChange","Object","objectSpread","defineProperty","handleAddPerson","concat","toConsumableArray","slice","src_Header","src_AddPerson","src_FilterLists","src_GuestList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93bb53d9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <h3 className=\"header-name\">\n        <span>Instant</span> Invite\n      </h3>\n      {/* <div className=\"sign-up-buttons\">\n            <button className=\"sign-up\">Sign Up</button>\n            <button className=\"sign-in\">Sign In</button>\n        </div> */}\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst FilterLists = props => {\n  return (\n    <label className=\"fliter-list\">\n      <input\n        type=\"checkbox\"\n        onChange={props.toggleFilter}\n        checked={props.isFiltered}\n      />\n      Hide those who haven't responded\n    </label>\n  );\n};\nexport default FilterLists;\n","import React, {Component} from 'react'; \n\nclass AddPerson extends Component {\n    state = {\n        value: ''\n    }; \n\n    valueChange = (e) => {\n        this.setState(\n            {\n                value: e.target.value\n            }\n        )\n    }\n    handleSubmit = (e) => {\n        e.preventDefault(); \n        this.props.addPerson(this.state.value); \n        this.setState({value: ''});\n    }\n\n\n    render() {\n        return (\n            <form className=\"add-person\" onSubmit={this.handleSubmit}>\n                <input className=\"add-input\" type=\"text\" onChange={this.valueChange} value={this.state.value} placeholder=\"Invite Another Person\"/>\n                <input className=\"add-button\" type=\"submit\" value=\"Invite!\"/>\n            </form>\n        )\n    }\n  \n}\nexport default AddPerson; ","import React from \"react\";\n\nconst GuestName = props => {\n  if (props.isEditing) {\n    return (\n      <input\n        type=\"text\"\n        value={props.children}\n        onChange={props.handleNameEdits}\n        className=\"input-name\"\n      />\n    );\n  }\n  return <span className=\"invitee-name\">{props.children}</span>;\n};\n\nexport default GuestName;\n","import React from \"react\";\nimport GuestName from \"./GuestName\";\n\nconst Guest = props => (\n  <li className=\"card\">\n    <GuestName\n      isEditing={props.isEditing}\n      handleNameEdits={e => props.setName(e.target.value)}\n    >\n      {props.name}\n    </GuestName>\n\n    <label className=\"confirmed-label\">\n      <input\n        type=\"checkbox\"\n        checked={props.isConfirmed}\n        onChange={props.handleConfirmation}\n      />{\" \"}\n      confirmed\n    </label>\n    <button className=\"edit-button\" onClick={props.handleEditing}>\n      {props.isEditing ? \"save\" : \"edit\"}\n    </button>\n    <button\n      className=\"remove-button\"\n      onClick={() => props.handleRemovePerson(props.index)}\n    >\n      remove\n    </button>\n  </li>\n);\n\nexport default Guest;\n","import React from \"react\";\nimport Guest from \"./Guest\";\n\nconst GuestList = props => (\n  <ul className=\"invitees-wrapper\">\n    {props.guests\n      .filter(guest => !props.isFiltered || guest.isConfirmed)\n      .map((guest, index, id) => (\n        <Guest\n          id={guest.id}\n          key={index}\n          name={guest.name}\n          isConfirmed={guest.isConfirmed}\n          handleConfirmation={() => props.toggleConfirmation(index)}\n          isEditing={guest.isEditing}\n          handleEditing={() => props.toggleEditing(index)}\n          handleRemovePerson={() => props.handleRemovePerson(index)}\n          setName={text => props.setNameAt(text, index)}\n        />\n      ))}\n  </ul>\n);\n\nexport default GuestList;\n","import React, { Component } from \"react\";\nimport \"./normalize.css\";\nimport \"./main.css\";\nimport Header from \"./Header\";\nimport FilterLists from \"./FilterLists\";\nimport AddPerson from \"./AddPerson\";\nimport GuestList from \"./GuestList\";\n\nclass App extends Component {\n  state = {\n    isFiltered: false,\n    guests: [\n      {\n        name: \"Travis Smith\",\n        id: 1,\n        isEditing: false,\n        isConfirmed: false\n      },\n      {\n        name: \"Rachel Cobb\",\n        id: 2,\n        isEditing: false,\n        isConfirmed: false\n      }\n    ]\n  }; //End State\n\n  toggleFilter = () => this.setState({ isFiltered: !this.state.isFiltered });\n\n  getTotalInvited = () => this.state.invitees.length;\n  //  getAttendingGuest = () =>\n  //  getUnattendingGuest = () =>\n\n  prevInviteeId = 2;\n\n  toggleProperty = (property, indexToChange) =>\n    this.setState({\n      guests: this.state.guests.map((guest, index) => {\n        if (index === indexToChange) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          };\n        }\n        return guest;\n      })\n    });\n\n  toggleConfirmation = index => this.toggleProperty(\"isConfirmed\", index);\n  toggleEditing = index => this.toggleProperty(\"isEditing\", index);\n\n  setNameAt = (name, indexToChange) =>\n    this.setState({\n      guests: this.state.guests.map((guest, index) => {\n        if (index === indexToChange) {\n          return {\n            ...guest,\n            name: name\n          };\n        }\n        return guest;\n      })\n    });\n\n  handleAddPerson = name => {\n    this.setState({\n      guests: [\n        {\n          name: name,\n          id: (this.prevInviteeId += 1),\n          isEditing: false,\n          isConfirmed: false\n        },\n        ...this.state.guests\n      ]\n    });\n  };\n\n  // In this handler we are using slice and the spread operator to return a new array with every guest before\n  // the one we want to remove and then every guest after the one we want to remove\n  handleRemovePerson = index => {\n    this.setState({\n      guests: [\n        ...this.state.guests.slice(0, index),\n        ...this.state.guests.slice(index + 1)\n      ]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"jumbotron\">\n          <Header />\n          <h1 className=\"app-name\">\n            <span>Instant</span> Invite\n          </h1>\n          <AddPerson addPerson={this.handleAddPerson} />\n        </div>\n        <div className=\"guest-container\">\n          <h2>{this.state.isFiltered ? \"Attending\" : \"Invited\"}</h2>\n          <FilterLists\n            isFiltered={this.state.isFiltered}\n            toggleFilter={this.toggleFilter}\n          />\n          <div className=\"invitees-wrapper\">\n            <GuestList\n              guests={this.state.guests}\n              handleRemovePerson={this.handleRemovePerson}\n              toggleConfirmation={this.toggleConfirmation}\n              toggleEditing={this.toggleEditing}\n              setNameAt={this.setNameAt}\n              isFiltered={this.state.isFiltered}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}